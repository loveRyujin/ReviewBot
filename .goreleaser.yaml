# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

version: 2

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy
    # 检查 Git 仓库状态是否为 clean/dirty
    - git fetch --tags -f
    # 使用 GitHub Actions 的机制导出环境变量
    - sh -c 'if [ -z "$(git status --porcelain)" ]; then echo "GIT_TREE_STATE=clean" >> $GITHUB_ENV; else echo "GIT_TREE_STATE=dirty" >> $GITHUB_ENV; fi'

builds:
  - env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64
      - arm
      - arm64
    goarm:
      - 7
    flags:
      - -trimpath
    ldflags:
      # 使用 GoReleaser 的内置变量 + 自定义环境变量
      - -s -w
      - -X 'github.com/loveRyujin/ReviewBot/pkg/version.gitVersion={{ .Version }}'
      - -X 'github.com/loveRyujin/ReviewBot/pkg/version.gitCommit={{ .Commit }}'
      - -X 'github.com/loveRyujin/ReviewBot/pkg/version.gitTreeState={{ .Env.GIT_TREE_STATE }}'
      - -X 'github.com/loveRyujin/ReviewBot/pkg/version.buildDate={{ .Date }}'
    main: ./cmd/reviewbot
    binary: reviewbot

archives:
  - formats: [tar.gz]
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
      - goos: windows
        formats: [zip]

changelog:
  use: github
  sort: asc
  format: "{{.SHA}}: {{.Message}} (@{{.AuthorUsername}})"
  groups:
    - title: Features
      regexp: "^.*feat[(\\w)]*:+.*$"
      order: 0
    - title: "Bug fixes"
      regexp: "^.*fix[(\\w)]*:+.*$"
      order: 1
    - title: "Enhancements"
      regexp: "^.*chore[(\\w)]*:+.*$"
      order: 2
    - title: "Refactor"
      regexp: "^.*refactor[(\\w)]*:+.*$"
      order: 3
    - title: "Build process updates"
      regexp: ^.*?(build|ci)(\(.+\))??!?:.+$
      order: 4
    - title: "Documentation updates"
      regexp: ^.*?docs?(\(.+\))??!?:.+$
      order: 4
    - title: Others
      order: 999

release:
  footer: >-

    ---

    Released by [GoReleaser](https://github.com/goreleaser/goreleaser).
